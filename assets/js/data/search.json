[ { "title": "Jekyll _Chirpy테마 블로그 만들기", "url": "/posts/Jekyll-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/", "categories": "Jekyll", "tags": "Tutorial, Jekyll", "date": "2022-04-04 00:00:00 +0900", "snippet": "시작하기Jekyll 로 블로그를 만드는 방법은 인터넷에 구글링 하는 방법들을 따라하면 굉장히 오류가 많다.지금 내가 쓰고 있는 _Chirpy 테마 적용이 특히 그러하다._Chirpy 테마의 장점 💕이 테마가 좋은 점은 무려 카테고리, 태그, 댓글, 검색 기능이 자동으로 딸려있다는 점이다.블로그를 시작하기에 가장 적합한 테마라고 생각한다.깃허브 블로그 만들기테마 레포지토리 Fork하기수 많은 에러와 오류를 겪은 입장에서 그냥 테마 파일 통째로 Fork 하는 방식을 추천한다.일단 간단하게 _Chirpy테마 깃허브 에서 테마를 Fork 해주도록 하자.위 깃허브 사이트에 들어가서 우측의 Fork 버튼을 눌러주면 자동으로 내 깃허브 계정으로 레포지토리가 복사가 된다.나의 레포지토리 이름 변경하기그 후 복사 된 _Chirpy 레포지토리의 이름을 변경하면 된다.해당 레포지토리에 들어가서 위쪽에 위치한 Setting - General 설정에서 바꿔주면 된다깃허브 이름을 [당신의 Github Username].github.io 로 바꿔준다.그렇게 하면, 10분에서 길면 몇시간까지 (💢전 계속 안 되어서 포기하고 자고 일어나니까 만들어져있었음) 기다리면당신의 홈페이지가 만들어질 것이다. 이렇게 해서 당신의 깃허브 홈페이지 주소는 Username.github.io 가 된다.1. 주의할 점 : Username 에 대문자가 포함되어 있다면 모두 소문자로 바꿔주어야 합니다!2. 저는 제 Username도 모르겠어요이름은 나의 Github Username을 사용하면 되는데, 깃허브 우측 상단의 조그만 계정 프로필을 누르면 나오는 Signed in as [Username] 이 당신의 Username 이다._Chirpy 테마 적용하기이렇게 해서 당신의 깃허브 홈페이지 주소는 Username.github.io 가 된다.당연히 테마도 적용되어 있겠지?그런데 들어가면 ? 놀랍게도 아무것도 안 나온다! :-) ✨layout: home # Index Page --- — --- layout: home # Index Page ---.이런 문구만이 당신을 반긴다. (●’◡’●)당신은 블로그를 커스텀 하고 Git Bash를 설치하여 아래와 같은 작업을 해주어야 한다.블로그 커스텀하기chirpy 사이트에 있는 튜토리얼 대로 하면, 예상 못한 에러가 쏟아진다. 💔 수십번의 에러와 구글링을 통해 얻은 오류 없는 한방 해결 루트는 다음과 같다.1. Username.Github.io 레포지토리 Clone 하기내 컴퓨터로 해당 레포지토리를 Clone 해온다.2. 폴더 내용 커스텀하기_config.yml 파일을 메모장으로 열어준다.그 후 당신이 수정해야 하는 내용은 다음과 같다. 한 문장씩 찾아서 내용을 써주면 된다.---timezone: Asia/Seoultitle: 🎀블로그 타이틀🎀tagline: 블로그 설명(부제)url: 'https://Username.github.io'github: username: Usernamesocial: name: Username email: 당신의 이메일@gmail.com links: - https://github.com/Username---여기까지는 사실 다른 블로그 테마들과 다를 게 없다. 하지만 chirpy 테마는 남다르다… 그리고 아직! Github에 Push 하지 마세요!3. (💥필수💥)그 후, 당신이 클론한 블로그 레포지토리 폴더로 돌아와서 다음과 같은 작업 해주어야 한다.1) .github에서 pages-deploy 파일만 살리기경로: 당신 블로그 폴더 - .github (의 하위 폴더 workflows 포함)에서 pages-deploy.yml.hook 파일을 제외한 모든 파일을 삭제해줍니다.그 후에 pages-deploy.yml.hook 파일 이름 변경을 하여pages-deploy.yml 으로 뒤에 hook을 제거하여 확장자명 변경을 해줍니다. 이렇게 하고 Github에 push를 하려고 하면 workflows 권한 오류가 뜨면서 push가 안 될겁니다.당연함. 우리는 권한을 추가해줘야 합니다.2) workflows 권한 추가하기github 홈페이지 - Settings - Developer settings - Personal access tokens 에서Getnerate new token 을 하고 난후 또는, 이미 token이 있다면 해당 token을 클릭하고Edit personal access token - Select scopes - workflows 체크!이제 workflows Push 에러가 사라진다. 여기까지 해서 Github에 Push 해보자! 넉넉 잡아 1시간 내에 처리가 된다. 이제 당신의 블로그 홈페이지가 보일 수도 있다. 되면 좋겠지만 만약 안 된다면…3) Ruby, Gem 설치 후 bundle 추가하기여기까지 해서 작동이 안 된다면 당신은 코딩 추가 작업을 해주어야 한다. 이 작업을 해놓으면후에 Local 서버로 블로그 상태를 확인하는 실시간 작업을 할 수 있으므로 하는 것을 추천한다. (●’◡’●)1) Ruby 설치하기 가장 최신 버전으로 받아준다. 로컬 서버로 블로그를 돌릴 때 필요합니다. 그냥 받아두면 나중에 쓸 일이 있을 것.2) Gem 설치하기 이 녀석이 핵심입니다. 가장 최신 버전으로 받아준다.3) 없는 사람? Git Bash 설치하기[1] Git Bash를 열고 클론한 깃허브 블로그 폴더 경로로 들어가준다.cd 블로그-폴더-경로…[2] 그 후 다음을 입력bash tools/init.sh 오류 나도 그냥 따라오세요[3] 다음을 입력bundle[4] 이제 Push를 해보세요! 여기까지 과정에 왔으면 이름이 gh-pages 인 새 브런치가 만들어져 있을겁니다! (이 부분이 반드시 되어있어야 함! ✨매우 매우 중요✨ ) 위 과정이 어떤 알 수 없는 에러로 안 되었다면 구글링을 통해서 꼭 해결해야 합니다. (…)4) 깃허브 블로그 Page 세팅하기당신의 블로그 레포지토리 - Settings - Pages - Source 에서Branch를 새로 만들어진 gh-pages로 변경합니다!Local 서버로 확인하기나는 그닥 사용하지 않지만 Local 서버로 홈페이지를 확인하고 싶다면 다음과 같이 하면 된다.오류 뜨시는 분들을 위해서 제가 오류해결을 정리한 티스토리 링크 남기고 갑니다(다음에 계속…)포스팅 해보기아래에 Jekyll 포스팅 튜토리얼을 번역한 글을 참조하시길 바랍니다…이 글의 당신의 블로그 생활에 도움이 되길 (●’◡’●)" }, { "title": "Jekyll 포스팅 튜토리얼 번역", "url": "/posts/jekyll-%ED%8F%AC%EC%8A%A4%ED%8C%85-%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC-%EB%B2%88%EC%97%AD/", "categories": "Jekyll", "tags": "Tutorial, Jekyll", "date": "2022-04-01 15:10:00 +0900", "snippet": "이 게시물은 Chirpy 테마에 대한 게시물을 작성하는 방법을 안내합니다. 이전에 _Jekyll_을 사용한 경험이 있더라도 이 기사는 읽을 가치가 있습니다. 많은 기능에서 특정 변수를 설정해야 하기 때문입니다.이름 지정 및 경로YYYY-MM-DD-TITLE.EXTENSION라는 이름의 파일을 생성하고. 블로그 폴더 내의 _posts 폴더에 집어넣습니다.파일의 확장자는 .md나 .markdown 이어야 합니다. 파일 생성 시간을 절약하려면 이 플러그인 Jekyll-Compose 을 사용하여 이를 수행하는 것이 좋습니다.머리말기본적으로 게시물 상단에 다음과 같은 머리말 을 작성해야 합니다.---title: 타이틀date: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [카테고리1, 카테고리2]tags: [태그1] # 태그 이름은 소문자여야합니다---주의 점! 게시물의 _레이아웃_은 기본적으로 설정되어 있으므로 머리말 블록에 layout : post 를 추가할 필요가 없습니다!날짜의 시간대게시물의 릴리즈 날짜를 정확히 기록하려면 _config.yml} 파일의 timezone설정을 해야합니다. 한국은 Asia/Soul 입니다. 또한 게시물의 타임존을 머리말 블록의 date에 제공합니다. 형식은 +/-TTTT 예를들어 +0800 같이카테고리와 태그각 categories포스트의 요소는 최대 2개의 요소를 포함하도록 설계되었으며 요소의 tags수는 0에서 무한대일 수 있습니다. 예를 들어:---categories: [Animal, Insect]tags: [bee]---작성자 정보게시물의 작성자 정보는 일반적으로 _머리말_에 입력할 필요가 없으며 기본적으로 _config.yml 파일의 social.name 변수와 social.links의 첫 번째 항목에서 가져옵니다._data/authors.yml 에 작성자 정보를 추가하는 것을 통해 재정의 가능합니다 (웹 사이트에 이 파일이 없으면 주저하지 말고 작성하세요!)&lt;author_id&gt;: name: &lt;full name&gt; twitter: &lt;twitter_of_author&gt; url: &lt;homepage_of_author&gt;그런 다음 게시물의 YAML 블록에서 사용자 지정 작성자를 설정합니다---author: &lt;author_id&gt;--- _data/authors.yml 파일에서 작성 정보를 읽는 방식의 장점은 페이지가 twitter:creator 메타 태그를 가지게 되어 Twitter Cards를 풍부하게 하고 검색엔진 최적화에 좋다는 것입니다.목차 만들기목차는 오른쪽 패널에 표시됩니다. 블로그 전체에서 목차를 끄려면 _config.yml에서 아래와 같이 toc 값을 false 로 수정합니다. 특정 게시물에서만 목차를 끄려면 머릿말 에 아래 코드와 같이 씁니다.(머릿말)---toc: false---댓글댓글을 전역으로 바꾸는 것은 _config.yml 파일의 comments.active 변수로 정의할 수 있습니다.이 변수를 true 로 설정하면 모든 게시물에 대한 댓글 기능이 켜집니다.특정 게시물에 대한 댓글만 닫으려면 머릿말 에 다음 코드를 추가하면 됩니다.---comments: false---수학 식For website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:성능 상의 이유로 수학식은 기본적으로 로드되지 않습니다. 그러나 다음을 통해 활성화 할 수 있습니다.---math: true---MermaidMermaid는 훌륭한 다이어그램 생성 도구입니다. 게시물에서 활성화 하려면 다음(아래) 코드를 추가합니다.---mermaid: true---그러면 다른 마크다운 언어처럼 그래프 코드를 ```mermaid 와 ```로 묶습니다.이미지이미지의 캡션이미지의 다음 줄에 이탤릭체 글씨를 추가하면 이미지 하단에 나타나 캡션 역할을 합니다.![img-description](/path/to/image)_Image Caption_이미지의 사이즈이미지가 로드될 때 페이지 콘텐츠 레이아웃이 이동되는 것을 방지라혀면, 각 이미지의 너비와 높이를 설정해주어야 합니다.![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }_Chirpy 버전 5.0.0 부터 너비와 높이가 약어를 지원합니다.너비 -&gt; w, 높이 -&gt; h![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }이미지의 위치기본적으로 이미지는 중앙에 위치하지만 normal, left, right 클래스 중 하나를 사용하여 위치를 지정할 수 있습니다. 위치가 지정되면 이미지 캡션을 추가하면 안 됩니다. Normal 위치 Image will be left aligned in below sample: ![Desktop View](/assets/img/sample/mockup.png){: .normal } left 위치 ![Desktop View](/assets/img/sample/mockup.png){: .left } right 위치 ![Desktop View](/assets/img/sample/mockup.png){: .right } 이미지 그림자이미지 창은 그림자 효과를 표시할 수 있으며, 그림자는 light 모드에서 볼 수 있습니다.![Desktop View](/assets/img/sample/mockup.png){: .shadow }이미지 CDN URLCDN에 이미지를 호스팅하는 경우 _config.yml 파일의 img_cdn 변수를 할당하여 CDN URL을 반복적으로 작성하는 시간을 절약할 수 있습니다.img_cdn: https://cdn.comimg_cdn이 지정되면 /로 시작하는 모든 이미지(사이트 아바타 및 게시물의 이미지)의 경로에 CDN URL이 추가됩니다.예를 들어 이미지를 사용할 때 이렇게 쓸 수 있습니다:![The flower](/path/to/flower.png)처리된 결과는 다음처럼 이미지 경로 앞에 CDN 접두사 https://cdn.com을 자동으로 추가합니다.&lt;img src=\"https://cdn.com/path/to/flower.png\" alt=\"The flower\"&gt;이미지 경로게시물에 많은 이미지가 포함된 경우 이미지의 경로를 반복적으로 정의하는 것은 시간이 많이 걸리는 작업입니다. 이 문제를 해결하기 위해 게시물의 말머리 에서 이 경로를 정의할 수 있습니다.---img_path: /img/path/---그러면, Markdown의 이미지 소스는 파일 이름만 써도 표시됩니다.![The flower](flower.png)처리된 결과는 다음과 같습니다.&lt;img src=\"/img/path/flower.png\" alt=\"The flower\"&gt;미리보기 이미지게시물 콘텐츠 상단에 이미지를 추가하려면 이미지의 path, width, height 및 alt 속성을 지정하세요.---image: path: /path/to/image/file width: 1000 # in pixels height: 400 # in pixels alt: 이미지 대체 텍스트---alt를 제외한 다른 모든 옵션, 특히 사용자 경험 및 웹 페이지 로딩 성능과 관련된 width 및 height가 필요합니다. 위의 “ 이미지의 사이즈” 섹션에서도 이에 대해 언급하고 있습니다._Chirpy v5.0.0_부터 height 및 width 속성은 height → h, width → w로 축약될 수 있습니다. 또한 이미지 경로도 미리보기 이미지에 전달할 수 있습니다. 즉, 설정되면 path 속성은 이미지 파일 이름만 필요합니다.게시물 메인에 고정하기하나 이상의 게시물을 홈페이지 상단에 고정할 수 있으며, 고정 게시물은 출시일에 따라 역순으로 정렬됩니다.다음으로 활성화 가능합니다.---pin: true---Prompts프롬프트에는 tip, info, warning 및 danger와 같은 여러 유형이 있습니다. 블록 인용에 prompt-{type} 클래스를 추가하여 생성할 수 있습니다. 예를 들어 info 유형의 프롬프트를 다음과 같이 정의합니다.&gt; Example line for prompt.{: .prompt-info }Syntax인라인 코드`inline code part`파일 경로 하이라이트{: .filepath} 을 붙이면 됩니다.`/path/to/a/file.extend`{: .filepath}코드 블록마크다운 기호 ```는 다음과 같이 코드 블록을 쉽게 생성할 수 있습니다.```This is a plaintext code snippet.```언어 지정하기. ```{language} 를 사용하면 구문 강조 표시가 있는 코드 블록이 표시 됩니다만, 이 테마에선 지원하지 않습니다.```yamlkey: value``` Jekyll 태그 Highlight는 이 테마와 호환되지 않습니다.라인 넘버기본적으로 plaintext, console 및 terminal을 제외한 모든 언어는 줄 번호를 표시합니다. 코드 블록의 줄 번호를 숨기려면 ‘nolineno’ 클래스를 추가하세요.```shellecho 'No more line numbers!'```{: .nolineno }파일명을 지정하기코드 블록의 맨 위에 코드 언어가 표시되는 것을 보셨을 것입니다. 파일 이름으로 바꾸려면 코드블럭 밑에 file 속성을 추가하여 이를 달성할 수 있습니다.```shell# content```{: file=\"path/to/file\" }Liquid CodesLiquid 스니펫을 표시하려면 Liquid Codes를 {% raw %} 및 {% endraw %}로 묶습니다.{% raw %}```liquid{% if product.title contains 'Pack' %} This product's title contains the word Pack.{% endif %}```{% endraw %}표시하지 않으려면, 게시물의 YAML 블록에 render_with_liquid: false(Jekyll 4.0 이상 필요)를 추가합니다.더 자세한 설명…자세한 내용은 다음에서 확인하세요. Jekyll Docs: Posts." }, { "title": "첫 포스트", "url": "/posts/Hello!/", "categories": "", "tags": "", "date": "2022-03-31 15:00:00 +0900", "snippet": "반가워요Hello World! 첫 포스트 입니다." } ]
